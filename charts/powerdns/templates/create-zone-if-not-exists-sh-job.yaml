{{- if and .Values.powerdns.zoneName .Values.powerdns.api.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: create-zone-if-not-exist-sh
  labels:
    {{- include "powerdns.labels" . | nindent 4 }}
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: create-zone-if-not-exist-sh
    spec:
      containers:
      - name: create-zone-if-not-exist-sh
        image: docker.io/curlimages/curl:8.7.1
        imagePullPolicy: IfNotPresent
        env:
          - name: PDNS_HOST
            value: "{{ template "powerdns.fullname" . }}"
          - name: PDNS_PORT
            value: "{{ .Values.powerdns.webserver.bindPort }}"
          - name: ZONE
            value: {{ .Values.powerdns.zoneName }}
          {{ include "powerdns.secretRef" (dict "Root" $ "Name" "PDNS_API_KEY" "Ref" .Values.powerdns.api.key) | nindent 10 }}
        command:
        - /bin/sh
        - -c
        - |
          zones_api_url="http://$PDNS_HOST:$PDNS_PORT/api/v1/servers/localhost/zones"
          while true; do
            echo -n "Fetching zones from PowerDNS ($zones_api_url)... "
            ZONES=$(curl -s --fail -H "X-API-Key: $PDNS_API_KEY" "$zones_api_url")
            if [ $? -eq 0 ]; then
              echo "OK."
              break
            else
              echo "Failed."
            fi
            sleep 10
          done
          if [ "${ZONES}" = "[]" ]; then
            echo "Zone is missing, creating... "
            while true; do
              echo -n "Creating zone: {\"name\":\"$ZONE\",\"type\":\"Zone\",\"nameservers\":[\"ns1-$ZONE\"],\"kind\":\"Native\"}... "
              curl -s --fail -X POST -d "{\"name\":\"$ZONE\",\"type\":\"Zone\",\"nameservers\":[\"ns1-$ZONE\"],\"kind\":\"Native\"}" -H "X-API-Key: $PDNS_API_KEY" "$zones_api_url"
              echo
              if [ $? -eq 0 ]; then
                echo "OK."
                break
              else
                echo "Failed."
              fi
              sleep 10
            done
          else
            echo "Zone already exists."
          fi
      restartPolicy: Never
{{- end }}
