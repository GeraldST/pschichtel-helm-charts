# Default values for wordpress.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

nginxImage:
  repository: docker.io/library/nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.25.1"

wordpressImage:
  repository: docker.io/library/wordpress
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80

httpProbeTimeout: 2

ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
  - host: example.org
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

nginxResources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

wordpressResources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  pvc:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi

configs:
  phpConfig:
    # Sicherstellen, dass der Upload eingeschaltet ist
    file_uploads: 'On'

    # Memory Limit auf 128 MB erhöhen
    # remember to update docker's resource limits when you change this
    memory_limit: '128M'

    # Maximale Dateigröße für Uploads
    # Auf 64 MB setzen
    upload_max_filesize: '64M'

    # Maximale Größe für POST Requests
    post_max_size: '64M'

    opcache.enable: '1'
    opcache.enable_cli: '0'
    opcache.memory_consumption: '128'
    opcache.interned_strings_buffer: '16'
    opcache.max_accelerated_files: '10000'
    opcache.validate_timestamps: '1'
    opcache.revalidate_freq: '60'
    opcache.revalidate_path: '1'
    opcache.fast_shutdown: '1'
    opcache.max_file_size: '0'
    opcache.file_update_protection: '0'
    opcache.file_cache: '/tmp'

    expose_php: 'off'

    display_errors: '1'
    log_errors: '1'
    fastcgi.logging: '1'
  rawPhpConfig: ''
  phpFpmPoolConfig:
    pm: 'dynamic'
    # remember to update the deployment's resource limits when you change this
    pm.max_children: '20'
    pm.min_spare_servers: '2'
    pm.max_spare_servers: '4'
    pm.max_requests: '200'
  rawPhpFpmConfig: ''
